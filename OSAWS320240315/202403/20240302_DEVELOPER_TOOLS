How to work with Amazon SES?

In order to send bulk/transaction emails by using Amazon SES as an relay service we need to have verified identities. The verified identity is authenticating the source information of the user, so that Amazon SES can allow us to send the emails.
These verified identities can be created in #2 ways
1. email address identity
We can configure an email address with SES and verify it to be used as an FROM email address in sending the bulk/transactional emails 

upon adding an email address identity, the amazon sends an verification email to the email address we provided, we need to click on the verification link to verify the identity and active for usage.

2. domain identity
We can configure an domain and validate it in SES to be used for sending the emails with FROM email address as domain.
upon adding domain identity, the Amazon SES provides CNAME records that should be configured within the DNS Registry of our domain to verify the authority or ownership of the domain, so that amazon SES will allow us to send emails on-behalf of our domain email address

upon verifying the identity, our account will be enabled with sandbox status it means we have restrictions enforced on sending the emails as below
1. daily email sending limit is 200 mails per 24 hours
2. 1 mail per one second
3. we can only send the emails to verified email addresses only


If we want to send the emails to anyone around the world of any number, then we need to request production access by filling the form and provide the appropriate reason for usage. The AWS Cloudplatform team reviews and verify the request and promote to production usage.
	
#2. In order to send the email through the program we need to create SMTP Credentials, which will provide username, password using which we can send the emails through our programs.
--------------------------------------------------------------------------------------------------------------------------------
AWS Developer Tools
--------------------
In the developer tools domain all the tools required for implementing an complete devops process of ci/cd are provided by the aws cloudplatform. There are 5 services are offered aspart of developer tools
1. CodeCommit
CodeCommit is an git repository hosted and managed by the aws cloudplatform

2. CodeBuild
Using the CodeBuild we can build the project and verify the quality gating checks like codecoverage, test executions and codereview. upon successful validation of these we can publish the build artifact into CodeArtifact
We can think of a CodeBuild as an Continous Integration pipeline.
upon developer merge an pr from feature to master branch, we wanted to run through several checks before allowing the merge like
1. run the testcases
2. verify the code quality by running codecoverage/testcoverage and code review tools
3. upon successful validation of the quality, then we want to produce the build artifact of the project
4. publish the build artifact into artifactory repository.
	
In order to carry out this whole process in validating the quality and publishing the build artifact we need infrastructure, instead we can use CodeBuild which takes care of running the build for the project.
	

3. CodeDeploy
Through the help of CodeDeploy we can deliver the software project/application onto the aws cloud infrastructure. 

4. CodePipeline
Through the help of CodePipeline we can execute the CodeDeployment to Release of the code

5. CodeArtifact
CodeArtifact is used for storing the build artifacts that are produced out of CodeBuild.
	
Instead of we using third-party vendors tools like
1. for version control : github, bitbucket etc
2. ci/cd pipeline implementations : jenkins, concourse, bamboo etc
3. delivering the code we need infrastruction automation tools like : terraform, ansible etc

making all these tools work together and integrating them in releasing the code is quite complex process. Not only integrating these tools, ensure security across them is quite complex. Instead of having these tools implemented from third-parties, we can make use of the developer tools provided aspart of aws cloudplatform which has better integration with cloud services.
	

1. CodeCommit
The devops engineers has to choose a version control system out of the available tools like github, bitbucket, gitgos, gitlab etc. Create organizations, teams and add members into the teams. create projects & repositories and manage permissions to the repositories controlling them in accessing.
	
Make use each repository we have created for the project is private and has restricted members to access them. For eg.. we need to group users of the repository into leads, members etc and grant access to them. A member can pull, clone, push, commit the code and create PR. A lead can create repositories, review PR and merge them. None of them should have access to delete the repositories

The devops engineer is responsible for configuring, controlling the access to the repositories that takes long time to setup and integrate with ci/cd tools as well.
	
Instead of using third-party tools available in the market, we can make use of AWS CodeCommit. It is an fully-integrated Version Control System with other services of the aws platform. For eg.. to grant access to the repositories we can create IAM users and bind policies enabling them access to the code repositories easily.
	
There are lot of pre-defined IAM policies are there, that can be used for quickly granting the access to the CodeCommit Repository for an IAM User.
1. AWSCodeCommitFullAccess
2. AWSCodeCommitPowerUser
3. AWSCodeCommitReadonly


How to use the AWS CodeCommit?
1. create an IAM User and grant PowerUser policy enabling him to create repositories and manage them. The IAM user apikey/secret access key cannot be used for accessing CodeCommit repositories, we need to create a separate CodeCommit credentials for each IAM user that should be used for accessing the CodeCommit repositories.
	

2. CodeBuild
CodeBuild is used for implementing continous integration pipeline. We can build, test and publish the artifacts through the help of CodeBuild

In general inorder to build, test and publish the artifact we need
1. infrastructure to run the build
2. we need to install the software packages/libraries for eg.. if it is an java project we need to install jdk, maven etc to run the build for the project
3. pull the code from the repository and build, test and publish the artifact into artifactory repository by writing the code

either we have to have an dedicated env to run the builds for the project or we need to automate the process of creating the infrastructure in running the build and destroy it at the end. 

Instead of having this complexity in building and publishing the artifact we can make use of CodeBuild.

In our project we need to write an build definition file called buildspec.yml in which we need to define the steps or stages in which the build should be performed for your project.
	
CodeCommit:	
airtelcare2
|-src
	|-main
		|-java
		|-resources
		|-webapp
			|-WEB-INF
				|-web.xml
	|-test
		|-java
		|-resources
|-pom.xml
|-buildspec.yml

mvn clean build

buildspec.yml
--------------
version: 0.2
phases:
	install:
    run-as: root
		on-failure: ABORT
		commands:
      - sudo apt update -y
			- sudo apt install -y openjdk-11-jdk
			- sudo apt install -y maven
  build:
		commands:
			- echo build started on `date`
			- mvn test
  post_build:
    commands:
      - mvn package
artifacts:
  files:
    - target/airtelcare2-1.0.jar
	discard-paths: yes
-------------------------------------------------------------------------------------------------------------------------------


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



























	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

