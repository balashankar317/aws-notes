2. No-Sql database
------------------

Characteristics of Relational database
--------------------------------------
1. Relational databases supports storing structured data, which means the fields of data across the table are fixed across the records or tuples.
2. supports querying and retrieving the data through join queries from multiple tables
3. these databases are also knows as "transactional databases", as they support transactionality for data consistency and integrity

even though the relational database management systems are good for storing/managing the business data, which is structured and transactional, these databases as their own limitations, so as an alternate the no-sql databases are introduced.
	
The relational databases supports storing structural data only, which means all the records of data has all the fixed columns/fields to be persisted.
But many of the times all the data will not be of fixed structure, and has varying fields among them.
For eg.. we are trying to represent products information in an e-commerce application, to hold the information about the products we can create a product table with fields defined in an relational database management system.
	
product [table]	
product_no (pk)  product_nm   description   manufacturer    price

In this table we can persist different products of data and use them in our application. But not all the products has same and fixed set of fields
For eg..
1. we want to represent an mobile phone inour application which has more attributes of data pertaining to the mobile to be persisted as 
 1.1 network_type
 1.2 display_type
 1.3 cpu
 1.4 storage
 1.5 ram
 etc
 
2. similary if we are persisting an different mobile it may have few more additional attributes/fields of data to be stored as
 2.1 color
 2.2 dual_sim
 2.3 foldable
 2.5 body_type
 2.6 os
etc

3. incase we are storing a different product like an television the fields of data would be totally different from mobile to television.
	
From the above we can understand not all the data is same, different entities/object/things has different attributes of data to represent them.
So how to store these products in an RDBMS database tables, how can we design the tables to accomodate such data?
There are #2 approaches in designing the tables to accomodate the data

#1. create/define tables with all the possible fields/attributes of data defined as columns inside them
product [table]
product_no
product_nm
description
manufacturer
price
network_type
display_type
cpu
ram
storage
color
os
dual_sim
foldable
remote_control
resolution
usb_ports
hdmi_ports

since every product will not have all the fields of data and the structure of the table is fixed, we endup in storing 'null' values for most of the columns that leads to huge memory wastage

#2. metadata table approach as below
break down the table into #2 tables
2.1 define the base table with fixed columns that seems to be same for all the entities/objects/things we are representing
for eg.. every product has the basic columns that can be defined into one table "product" as below

product
product_no (pk)  product_nm  description  manufacturer price

2.2 for the fields/columns that seems to be non-standard we can create an table with column_nm and column_values as dynamic which is also called as "columnar table" or "metadata tables" as below

product_attributes
-------------------
product_no (fk)
col_nm
col_val

for eg. we want to store mobile data this can be done as below
product
product_no (pk)  product_nm  description  manufacturer price
p1               iphone 14   apple phone  apple        54000
	
product_attributes
product_no  (fk)   col_nm        col_val
p1                 network_type  5g
p1                 display_type  retina display
p1                 color         blue
p1                 storage       128gb

this approach of storing the data has lot of problems like querying and using the data becomes very challenging. 
	
select * from product where manufacturer = 'apple';

select * from product where color = 'blue' = this is not supported, because color is no more column to query. so we need to use complex join queries to retrieve the data

select * from project p inner join product_attributes pa on p.product_no = pa.product_no where pa.col_nm = 'color' and pa.col_val = 'blue';
p1               iphone 14   apple phone  apple        54000 color blue

to query all the fields of attributes for a product we need to write inner joins and sub-queries that makes much more complex in retrieving the data. 
Since the Relational database management systems are designed to work for structured data, there are poor at handling semi-structure data and results in poor performance because of writing join queries in fetching the data.
	
So to overcome the above problems, the no-sql or semi-structured databases are introduced.
	
2. no-sql or semi-structured database
-------------------------------------
In these databases also we capture fields of data across the entities/objects/things we want to store/represent but the fileds are not fixed and might vary from object-to-object or entity-to-entity we are representing, so because of this these databases are called "semi-structure" databases.
	
Incase of relational database management system, the data is kept or stored interms of tables with fixed-set of columns defined accross all the databases irrespective of vendor provided like
1. oracle
2. db2
3. postgres
4. mysql server

whereas when it comes to no-sql or semi-structure databases, it is left to the descreation of the database vendor to comeup with their own datastructure or way of representing and managing the data inthe underlying database

For e.g.. if we are using an no-sql database "MongoDB" it uses documents format in storing the data as below
table = collection
in the collections we store documents of data in json format. each doc should have an unique key to identify as below

products (collection)
{
	"product_no": 283,
	"product_nm": "iphone 14",
	"manufacturer" : "Apple",
	"description": "Smart phone",
	"networkType": "5g",
	"displayType": "Retina Display"
},
{
	"product_no": "298",
	"product_nm": "kingsize bed",
	"description": "true wood bed",
	"dimensions": "78X54",
	"color": "white",
	"features": ["hardwood", "iron frame"]
}

now we query and retrieve documents of data from an collection. 
	
usually these databases doesnt support or meant for
	1. storing relational data
	2. usually non-transactional
and results in greater performance in storing/retrieving the data.
	
These databases used for storing un-structured data like social network, e-commerce applications etc where most of the data is semi-structured.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	




















































































































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	